// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Job {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  location        String
  salary          Int
  employment_type String @default("fulltime")
  job_type        String @default("on-site")
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  password String
  role     Role?  @default(user)

  company     Company?
  Reviews     Reviews[]
  Application Application[]

  SavedJobs SavedJobs[]
  details   UserDetails?
}

enum Role {
  user
  recruiter
}

model UserDetails {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  avatar     String?
  firstName  String
  lastName   String
  address    String?
  education  String?
  skills     String[]
  phone      Int?
  experience Int?
  linkedin   String?
  github     String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedJobs {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String  @db.ObjectId
  jobId  String  @db.ObjectId
  user   User    @relation(fields: [userId], references: [id])
  job    Opening @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

// model UserDetails{ firstname,lastname,email,address,education,skills,Socail {github:"url"}{linkdin:"url"},applied}

model Company {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  logoUrl     String?
  ownerId     String    @unique @db.ObjectId
  owner       User      @relation(fields: [ownerId], references: [id])
  jobs        Opening[]
  Reviews     Reviews[]
}

model Opening {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  location        String
  salary          Int
  employment_type String        @default("fulltime")
  job_type        String        @default("onsite")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  company_id      String        @db.ObjectId
  company         Company       @relation(fields: [company_id], references: [id], onDelete: Cascade)
  application     Application[]
  SavedJobs       SavedJobs[]
}

// reviews as company page
model Reviews {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  user_id    String   @db.ObjectId
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  company_id String   @db.ObjectId
  company    Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // we take from current page of company
}

model Application {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  user_id String  @db.ObjectId
  user    User    @relation(fields: [user_id], references: [id])
  job_id  String  @db.ObjectId
  job     Opening @relation(fields: [job_id], references: [id], onDelete: Cascade)
}
